---
title: "Assignment 3: Linear Mixed Effects Models"
author: "Tamar Gazit (B00842040)"
format: html
editor: visual
---

## Data Preparation

```{r}
# -------------------------------------------
# 1. Load packages for data cleaning
# -------------------------------------------
library(haven)      # For reading SPSS (.sav) files
library(tidyverse)  # For data manipulation (select, mutate)
library(dplyr)      # For data manipulation (select, mutate)

# -------------------------------------------
# 2. Load & prepare data 
# -------------------------------------------
data <- read_sav("P6003.A4.sav") %>%
  # Keep only the variables I need for the assignment
  select(id, day, swl, tipm.E, tipm.N) %>%
  # Convert data types to make sure the model runs properly
  mutate(
    id = as.factor(id),      # id = participant identifier. Must be a factor for grouping in mixed models
    day = as.numeric(day)    # day = numeric because we may eventually want to test time effects
  )

# Double check that everything looks right before moving forward
glimpse(data)    # Quick check on structure and types
summary(data)    # Descriptive summary to spot any weird values or missing data
head(data)       # Make sure the dataset is in long format

```

## Data Exploration

#### Descriptive Statistics

```{r}
# -------------------------------------------
# 3. Generate APA-style descriptive/correlation table
# -------------------------------------------
library(apaTables)

apa.cor.table(data %>% select(swl, tipm.E, tipm.N),
              filename = "Table1.doc")

```

#### Visual Screening of Raw Data

```{r}
# -------------------------------------------
# 4. Univariate plots: assess distribution, skew, and outliers
# -------------------------------------------
# Load necessary packages for plotting
library(flexplot)
library(ggplot2)

# Plot histograms for each variable
a = flexplot(swl ~ 1, data = data) + ggtitle("Distribution of Satisfaction with Life")
b = flexplot(tipm.E ~ 1, data = data) + ggtitle("Distribution of Extraversion")
c = flexplot(tipm.N ~ 1, data = data) + ggtitle("Distribution of Neuroticism")

# Arrange plots together for side-by-side comparison
a + b / c

# Quick interpretation:
# - SWL is slightly left skewed. Lots of people report being pretty satisfied overall.
# - Extraversion looks approximately normal, maybe a touch right skewed.
# - Neuroticism is clearly right skewed. Most people score lower on it.
# - No extreme outliers or major floor/ceiling effects detected. I feel confident proceeding!


# -------------------------------------------
# 5. Bivariate plots: assess linearity and outliers
# -------------------------------------------
# Plot scatterplots with smoothers
d = flexplot(swl ~ tipm.E, data = data) + ggtitle("Satisfaction with Life by Extraversion")
e = flexplot(swl ~ tipm.N, data = data) + ggtitle("Satisfaction with Life by Neuroticism")

# Combine plots side-by-side
d + e

# Quick interpretation:
# - SWL increases with extraversion. Preliminary support for H1!
# - SWL decreases with neuroticism. Mostly linear, though a slight curve shows up. Preliminary support for H2!
# - This slight curve may suggest that the effect of neuroticism on SWL isn't perfectly linear. For example, the negative association might be stronger at higher levels of neuroticism.
# - I’ll note the possible curvilinear pattern in neuroticism in my write-up, but it’s not a dealbreaker for now.

```

#### Fit Baseline Model and Compute Intraclass Coefficient Coefficient (ICC)

```{r}
# -------------------------------------------
# 6. Fit baseline model with random intercepts only
# -------------------------------------------
library(lme4)        # For mixed effects modeling
library(performance) # For ICC calculation (in case flexplot doesn't work)

# Baseline model: no predictors, just random intercept for participant
# This lets me estimate how much variance in SWL is due to differences between people
baseline_model <- lmer(swl ~ 1 + (1 | id), data = data)

# View model summary
summary(baseline_model)

# Quick interpretation:
# - Between-person variance (random intercept for id) = 1.91
# - Within-person (residual) variance = 0.66
# - This means there's a lot of variation in SWL between participants, not just within them.
# - This suggests that people differ meaningfully in their average life satisfaction scores across time.

# -------------------------------------------
# 7. Calculate the Intraclass Correlation Coefficient (ICC)
# -------------------------------------------
flexplot::icc(baseline_model) 

# Quick interpretation
# - ICC = 0.74. 74% of the variance in SWL is between participants, meaning that individual differences (Level 2) explain most of the variation in SWL.
# - The design effect (12.30) also confirms that observations are not independent.
# - Because of this clustering, a regular regression would violate the independence assumption.
# - Multilevel modeling is definitely justified here!
```

## Model Building and Comparison

#### Fit Reduced and Full Linear Mixed Effects Model

```{r}
# -------------------------------------------
# Step 8: Fit reduced model (random intercepts only)
# -------------------------------------------
# This model assumes that the effects of extraversion and neuroticism are fixed (the same across all participants), and that participants differ only in their overall average life satisfaction (random intercept).

model_1 <- lmer(swl ~ tipm.E + tipm.N + (1 | id), data = data)

# View model summary
summary(model_1)


# Quick interpretation:
#   - Extraversion was a positive predictor of life satisfaction, b = 0.16, SE = 0.01, t = 13.43. Supports H1.
#   - Neuroticism was a negative predictor of life satisfaction, b = -0.23, SE = 0.01, t = -20.30. Supports H2.

# -------------------------------------------
# Step 9: Fit full model (random slopes + intercepts)
# -------------------------------------------
# This model allows the relationship between extraversion/neuroticism and SWL to vary across individuals. 

model_2 <- lmer(swl ~ tipm.E + tipm.N + (tipm.E + tipm.N | id), data = data)

# View model summary
summary(model_2)

# Quick interpretation:
#   - Extraversion and neuroticism are still significant predictors, and their direction is the same as before (b = 0.16 for extraversion; b = -0.21 for neuroticism)
#   - But now the model also estimates the random slope variance (i.e., how much these relationships vary between individuals)

```

#### Model Comparisons

```{r}
# -------------------------------------------
# Step 10: Compare reduced vs. full model
# -------------------------------------------
# This tests whether allowing the slopes to vary improves the model.

model.comparison(model_1, model_2)

# Quick interpretation:
#   - The full model (with random slopes) fit the data significantly better than the reduced model. AIC and BIC were lower for the full model, and the Bayes Factor strongly supported it.
#   - Predicted differences between models reached up to 1.37 points on the SWL scale.
#   - This tells me that the effects of extraversion and neuroticism on life satisfaction are not the same for everyone. The strength and direction of those relationships vary across participants.

# Conclusion: 
#   - Including random slopes improves model fit and captures important individual differences.
```

## Final Model Diagnostics and Summary

```{r}
# -------------------------------------------
# Step 11: Visualize best-fitting model
# -------------------------------------------

# Load required package
library(flexplot)

# Visualize model predictions by participant
visualize(model_2, plot = "model")

# Interpretation:
# - SWL tends to increase with extraversion across all levels of neuroticism
# - Individual slopes for extraversion vary: supports inclusion of random slopes

# -------------------------------------------
# Step 12: Check residual diagnostics
# -------------------------------------------

# Generate diagnostic plots for residuals
visualize(model_2, plot = "residuals")

# Interpretation:
# - Histogram of residuals appears approximately normal
# - Residuals vs. fitted plot shows slight funneling (minor heteroskedasticity)
# - Spread-location (S-L) plot has a mild downward trend
# - Model assumptions reasonably met with minor deviations

# -------------------------------------------
# Step 13: Extract fixed and random effect estimates
# -------------------------------------------

# Load package for tidy summaries
library(broom.mixed)

# Extract fixed effect estimates with confidence intervals
fixed_effects <- tidy(model_2, effects = "fixed", conf.int = TRUE)
print(fixed_effects)

# Interpretation of fixed effects:
# - Intercept = 4.51. predicted SWL when both predictors = 0
# - Extraversion = 0.16. Each 1-point increase in extraversion leads to +0.16 in SWL
# - Neuroticism ≈ -0.21. Each 1-point increase in neuroticism leads to −0.21 in SWL

# -------------------------------------------
# Step 14: Examine random effects structure
# -------------------------------------------

# Summarize variance components (random intercepts and slopes)
random_summary <- VarCorr(model_2)
print(random_summary)

# Convert to data frame for easier viewing of variances and covariances
random_effects <- as.data.frame(random_summary)

# View variance components 
random_variances <- random_effects[, c("grp", "var1", "var2", "vcov")]
print(random_variances)

# Interpretation:
# - Substantial variability in intercepts (SD = 1.42)
# - Meaningful variability in slopes for both extraversion and neuroticism

# -------------------------------------------
# Step 15: Model-level statistics (ICC and R²)
# -------------------------------------------

# Load package for model performance metrics
library(performance)

# Intraclass Correlation Coefficient (ICC)
icc(model_2)

# Marginal and Conditional R²
r2(model_2)

# Interpretation:
# - ICC = 0.77. 77% of variance in SWL is between individuals
# - Marginal R² = 0.094. Fixed effects alone explain 9.4% of variance
# - Conditional R² = 0.788. Full model explains 78.8% of variance
# - Confirms importance of accounting for individual differences via multilevel modeling


```

## Testing Hypothesis 3

```{r}
# -------------------------------------------
# Step 1: Decompose Predictors into Within- and Between-Person Components
# -------------------------------------------
# This step prepares the data for testing H3, which examines whether the effects of extraversion and neuroticism on life satisfaction are similar at both within- and between-person levels.

data <- data %>%
  group_by(id) %>%
  mutate(
    # Between-person predictors (average across time for each participant)
    tipm.E_mean = mean(tipm.E, na.rm = TRUE),        
    tipm.N_mean = mean(tipm.N, na.rm = TRUE),        

    # Within-person predictors (deviation from participant's own mean)
    tipm.E_dev  = tipm.E - tipm.E_mean,              
    tipm.N_dev  = tipm.N - tipm.N_mean               
  ) %>%
  ungroup()

# -------------------------------------------
# Step 2: Fit Decomposition Model
# -------------------------------------------
# The model includes both within-person (deviation) and between-person (mean) predictors, with a random intercept for participant ID to account for repeated measures.

library(lme4)
model_decomp <- lmer(
  swl ~ tipm.E_mean + tipm.E_dev + tipm.N_mean + tipm.N_dev + (1 | id),
  data = data
)

# -------------------------------------------
# Step 3: View Summary of Model Estimates
# -------------------------------------------
# This provides coefficients, standard errors, t-values, and p-values for fixed effects.

summary(model_decomp)

# -------------------------------------------
# Step 4: Extract Confidence Intervals
# -------------------------------------------
# Confidence intervals (95%) for fixed effect estimates using the Wald method.

confint(model_decomp, method = "Wald")

# -------------------------------------------
# Step 5: Visualize Final Decomposition Model
# -------------------------------------------
# This plot shows the predicted relationship between predictors and satisfaction with life across individuals, highlighting individual variation and interactions.

library(flexplot)

visualize(model_decomp, plot = "model")

# -------------------------------------------
# Step 6: Check Residual Diagnostics
# -------------------------------------------
# These plots assess model assumptions including normality and homoscedasticity.

visualize(model_decomp, plot = "residuals")

# -------------------------------------------
# Step 7: Calculate ICC and R Squared Estimates
# -------------------------------------------
library(performance)
icc(model_decomp)
r2(model_decomp)


```
